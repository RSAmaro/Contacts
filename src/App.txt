import ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';
import ArrowDropUpIcon from '@mui/icons-material/ArrowDropUp';
import FilterAltIcon from '@mui/icons-material/FilterAlt';
import { Container, IconButton, InputBase, Paper, Skeleton, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow } from '@mui/material';
import { useEffect, useState } from 'react';
import './App.css';
import TableComponent from './components/Table';
import { Contact } from './interfaces/Contact';
import { Api } from './routes/Axios';


function App() {
  const db = new Api();

  const [page, setPage] = useState(0);
  const [perPage, setPerPage] = useState(5);
  const [sort, setSort] = useState("");

  const [rowData, setRowData] = useState<Contact[]>([]);
  const [count, setCount] = useState(0);
  const [loading, setLoading] = useState(false);

  const columns = [
    {
      label: 'Id',
      value: 'id',
    },
    {
      label: 'Nome',
      value: 'name',
    },
    {
      label: 'Contato',
      value: 'phone',
    }
  ];

  async function getData() {
    setLoading(true);

    setRowData(await db.getRows((page + 1), perPage, sort));
    setCount(db.count);

    setLoading(false);
  }

  useEffect(() => {
    getData(); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [page, perPage, sort]);

  // Pagination Handles
  const handleChangePage = (event: any, newPage: number) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event: any) => {
    setPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  const handleSearch = (event: any, value: string) => {
    console.log(value);
  }

  const handleSort = (event: any, value: string) => {
    if (sort === "") { return setSort(value); }
    if (sort === value) { return setSort(value + "_desc"); }
    if (sort === value.concat("_desc")) { return setSort(""); }
    return setSort(value);
  }

  const headerHandleClick = async (value: string) => {
    console.log(value);
}

  return (
    <div className="App">
      <Container className="App">
        {/* <TableContainer>
          <TableComponent columns={columns} data={rowData} OnClickHeader={headerHandleClick}></TableComponent>
        </TableContainer> */}
        <br /><br />
        <TableContainer component={Paper} sx={{ maxHeight: 635 }}>
          <Table sx={{ minWidth: 550 }} size="medium" aria-label="a dense table" stickyHeader >
            <TableHead>
              <TableRow>
                {
                  columns.map((col) => (

                    <TableCell key={col.value}>
                      <b style={{ userSelect: 'none' }} onClick={(e) => handleSort(e, col.value)}>{col.label}{sort === col.value ? <ArrowDropUpIcon /> : null}{sort === (col.value + "_desc") ? <ArrowDropDownIcon /> : null}</b>
                      <Paper sx={{ p: '2px 4px', display: 'flex', alignItems: 'center', width: '100%' }} >
                        <InputBase sx={{ ml: 1, flex: 1 }} placeholder={"Filtrar por " + col.label} />
                        <IconButton sx={{ p: '10px' }} aria-label="search" onClick={(e) => handleSearch(e, col.value)}>
                          <FilterAltIcon />
                        </IconButton>
                      </Paper>
                    </TableCell>

                  ))
                }
              </TableRow>
            </TableHead>
            <TableBody>
              {
                rowData.length ? rowData.map((row) => (

                  <TableRow key={row.id}>
                    <TableCell component="th" scope="row">{loading ? <Skeleton /> : row.id}</TableCell>
                    <TableCell align="left">{loading ? <Skeleton /> : row.name}</TableCell>
                    <TableCell align="left">{loading ? <Skeleton /> : row.phone}</TableCell>
                  </TableRow>

                )) : null
              }
            </TableBody>
          </Table>
        </TableContainer>

        <TablePagination
          component="div"
          count={count}
          page={page}
          onPageChange={handleChangePage}
          rowsPerPage={perPage}
          onRowsPerPageChange={handleChangeRowsPerPage}
          rowsPerPageOptions={[5, 10, 25, 50]}
          showFirstButton={true}
          showLastButton={true}
        />
      </Container>
    </div>
  );
}

export default App;
